
I2C_setup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000678  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800080c  0800080c  0000180c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800086c  0800086c  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  0800086c  0800086c  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800086c  0800086c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800086c  0800086c  0000186c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000870  08000870  00001870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000874  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000878  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000878  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001e4d  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008e4  00000000  00000000  00003e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000270  00000000  00000000  00004768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001b0  00000000  00000000  000049d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000143dd  00000000  00000000  00004b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002bbd  00000000  00000000  00018f65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000812d2  00000000  00000000  0001bb22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009cdf4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000724  00000000  00000000  0009ce38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  0009d55c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080007f4 	.word	0x080007f4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080007f4 	.word	0x080007f4

080001d4 <TIM5Config>:
#include "Delay.h"
#include "RccConfig.h"

void TIM5Config(){
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	//Enable TIM5
	RCC->APB1ENR |= (1 << 3);
 80001d8:	4b12      	ldr	r3, [pc, #72]	@ (8000224 <TIM5Config+0x50>)
 80001da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80001dc:	4a11      	ldr	r2, [pc, #68]	@ (8000224 <TIM5Config+0x50>)
 80001de:	f043 0308 	orr.w	r3, r3, #8
 80001e2:	6413      	str	r3, [r2, #64]	@ 0x40

	//Set prescaler to achieve 1 us/cycle and max count before reset
	TIM5->PSC = 84 - 1;
 80001e4:	4b10      	ldr	r3, [pc, #64]	@ (8000228 <TIM5Config+0x54>)
 80001e6:	2253      	movs	r2, #83	@ 0x53
 80001e8:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM5->ARR = 0xffffffff;
 80001ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000228 <TIM5Config+0x54>)
 80001ec:	f04f 32ff 	mov.w	r2, #4294967295
 80001f0:	62da      	str	r2, [r3, #44]	@ 0x2c

	//Clear UIF flag
	TIM5->SR &= ~(1 << 0);
 80001f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000228 <TIM5Config+0x54>)
 80001f4:	691b      	ldr	r3, [r3, #16]
 80001f6:	4a0c      	ldr	r2, [pc, #48]	@ (8000228 <TIM5Config+0x54>)
 80001f8:	f023 0301 	bic.w	r3, r3, #1
 80001fc:	6113      	str	r3, [r2, #16]

	//Enable counter and wait for it to enable
	TIM5->CR1 |= (1<<0);
 80001fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000228 <TIM5Config+0x54>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a09      	ldr	r2, [pc, #36]	@ (8000228 <TIM5Config+0x54>)
 8000204:	f043 0301 	orr.w	r3, r3, #1
 8000208:	6013      	str	r3, [r2, #0]
	while(!(TIM5->SR & (1<<0)));
 800020a:	bf00      	nop
 800020c:	4b06      	ldr	r3, [pc, #24]	@ (8000228 <TIM5Config+0x54>)
 800020e:	691b      	ldr	r3, [r3, #16]
 8000210:	f003 0301 	and.w	r3, r3, #1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d0f9      	beq.n	800020c <TIM5Config+0x38>

}
 8000218:	bf00      	nop
 800021a:	bf00      	nop
 800021c:	46bd      	mov	sp, r7
 800021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000222:	4770      	bx	lr
 8000224:	40023800 	.word	0x40023800
 8000228:	40000c00 	.word	0x40000c00

0800022c <Delay_us>:

void Delay_us(uint32_t time){
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
	// Reset counter
	TIM5->CNT = 0;
 8000234:	4b07      	ldr	r3, [pc, #28]	@ (8000254 <Delay_us+0x28>)
 8000236:	2200      	movs	r2, #0
 8000238:	625a      	str	r2, [r3, #36]	@ 0x24
	// Wait until counter reaches time
	while (TIM5->CNT < time);
 800023a:	bf00      	nop
 800023c:	4b05      	ldr	r3, [pc, #20]	@ (8000254 <Delay_us+0x28>)
 800023e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000240:	687a      	ldr	r2, [r7, #4]
 8000242:	429a      	cmp	r2, r3
 8000244:	d8fa      	bhi.n	800023c <Delay_us+0x10>
}
 8000246:	bf00      	nop
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	40000c00 	.word	0x40000c00

08000258 <Delay_ms>:


void Delay_ms(uint32_t time){
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]

	//Wait until counter reaches time
	for (uint32_t i = 0; i < time; i ++){
 8000260:	2300      	movs	r3, #0
 8000262:	60fb      	str	r3, [r7, #12]
 8000264:	e006      	b.n	8000274 <Delay_ms+0x1c>
		Delay_us(1000); //wait 1ms by delaying for 1000us
 8000266:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800026a:	f7ff ffdf 	bl	800022c <Delay_us>
	for (uint32_t i = 0; i < time; i ++){
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	3301      	adds	r3, #1
 8000272:	60fb      	str	r3, [r7, #12]
 8000274:	68fa      	ldr	r2, [r7, #12]
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	429a      	cmp	r2, r3
 800027a:	d3f4      	bcc.n	8000266 <Delay_ms+0xe>
	}
}
 800027c:	bf00      	nop
 800027e:	bf00      	nop
 8000280:	3710      	adds	r7, #16
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
	...

08000288 <SysClockConfig>:

#define PLL_M 4 // Divide PLL input by 4. 8/4 = 2MHz input
#define PLL_N 84 // Multiply frequency by 84. 2 * 84 = 168Mhz
#define PLL_P 0 // Divide frquency by 2. 168/2 = 84Mhz

void SysClockConfig(){
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
	************************************************************************/

		//Using STM32CubeMX to inform clock setup.

		//1. ENABLE HSE and wait for the HSE to become Ready
		RCC->CR |= (1 << 16);
 800028c:	4b2b      	ldr	r3, [pc, #172]	@ (800033c <SysClockConfig+0xb4>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a2a      	ldr	r2, [pc, #168]	@ (800033c <SysClockConfig+0xb4>)
 8000292:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000296:	6013      	str	r3, [r2, #0]
		while(!(RCC->CR & (1<<17))){}
 8000298:	bf00      	nop
 800029a:	4b28      	ldr	r3, [pc, #160]	@ (800033c <SysClockConfig+0xb4>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d0f9      	beq.n	800029a <SysClockConfig+0x12>

		//2. Set the POWER ENABLE CLOCK and VOLTAGE REGULATOR
		RCC->APB1ENR |= (1<<28); //Enable power
 80002a6:	4b25      	ldr	r3, [pc, #148]	@ (800033c <SysClockConfig+0xb4>)
 80002a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002aa:	4a24      	ldr	r2, [pc, #144]	@ (800033c <SysClockConfig+0xb4>)
 80002ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002b0:	6413      	str	r3, [r2, #64]	@ 0x40
		PWR->CR |= (3 << 14); //keep voltage regulator in scale 1 (reset)
 80002b2:	4b23      	ldr	r3, [pc, #140]	@ (8000340 <SysClockConfig+0xb8>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a22      	ldr	r2, [pc, #136]	@ (8000340 <SysClockConfig+0xb8>)
 80002b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80002bc:	6013      	str	r3, [r2, #0]

		//3. Configure the FLASH PREFETCH and the LATENCY Related Settings
		FLASH->ACR |= (1 << 10); //Enable data cache
 80002be:	4b21      	ldr	r3, [pc, #132]	@ (8000344 <SysClockConfig+0xbc>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a20      	ldr	r2, [pc, #128]	@ (8000344 <SysClockConfig+0xbc>)
 80002c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002c8:	6013      	str	r3, [r2, #0]
		FLASH->ACR |= (1 << 9); //Enable instruction cache
 80002ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000344 <SysClockConfig+0xbc>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a1d      	ldr	r2, [pc, #116]	@ (8000344 <SysClockConfig+0xbc>)
 80002d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002d4:	6013      	str	r3, [r2, #0]
		FLASH->ACR |= (1 << 8); //Enable prefetch cache
 80002d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000344 <SysClockConfig+0xbc>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a1a      	ldr	r2, [pc, #104]	@ (8000344 <SysClockConfig+0xbc>)
 80002dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002e0:	6013      	str	r3, [r2, #0]
		FLASH->ACR |= (2 << 0); //Set flash latency to two wait states (3 CPU cycles)
 80002e2:	4b18      	ldr	r3, [pc, #96]	@ (8000344 <SysClockConfig+0xbc>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4a17      	ldr	r2, [pc, #92]	@ (8000344 <SysClockConfig+0xbc>)
 80002e8:	f043 0302 	orr.w	r3, r3, #2
 80002ec:	6013      	str	r3, [r2, #0]

		//4. Configure the PRESCALARS HCLK, PCLK1, PCLK2
		RCC->CFGR = (0 << 4) | (4 << 10) | (0 << 13); //AHB not divided | APB1 divided by 2 | APB2 not divided
 80002ee:	4b13      	ldr	r3, [pc, #76]	@ (800033c <SysClockConfig+0xb4>)
 80002f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80002f4:	609a      	str	r2, [r3, #8]

		//5. Configure the MAIN PLL
		//PLL input division factor of 4 | PLL output multiplication factor of 84 | PLL output division factor of 2 | HSE selected as PLL src.
		RCC->PLLCFGR = (PLL_M << 0) | (PLL_N << 6) | (PLL_P << 16) | (1 << 22);
 80002f6:	4b11      	ldr	r3, [pc, #68]	@ (800033c <SysClockConfig+0xb4>)
 80002f8:	4a13      	ldr	r2, [pc, #76]	@ (8000348 <SysClockConfig+0xc0>)
 80002fa:	605a      	str	r2, [r3, #4]

		//6. Enable the PLL and wait for it to become ready
		RCC->CR |= (1 << 24); // enable PLL
 80002fc:	4b0f      	ldr	r3, [pc, #60]	@ (800033c <SysClockConfig+0xb4>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a0e      	ldr	r2, [pc, #56]	@ (800033c <SysClockConfig+0xb4>)
 8000302:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000306:	6013      	str	r3, [r2, #0]
		while(!(RCC->CR & (1<<25))){}; //wait for PLL to be ready
 8000308:	bf00      	nop
 800030a:	4b0c      	ldr	r3, [pc, #48]	@ (800033c <SysClockConfig+0xb4>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000312:	2b00      	cmp	r3, #0
 8000314:	d0f9      	beq.n	800030a <SysClockConfig+0x82>

		//7. Select the Clock Source and wait for it to be set
		RCC->CFGR |= (2<<0); // Set PLL as clock source
 8000316:	4b09      	ldr	r3, [pc, #36]	@ (800033c <SysClockConfig+0xb4>)
 8000318:	689b      	ldr	r3, [r3, #8]
 800031a:	4a08      	ldr	r2, [pc, #32]	@ (800033c <SysClockConfig+0xb4>)
 800031c:	f043 0302 	orr.w	r3, r3, #2
 8000320:	6093      	str	r3, [r2, #8]
		while(!(RCC->CFGR & (2 << 2))){}; // Wait for switch from default clk src (HSI) to PLL.
 8000322:	bf00      	nop
 8000324:	4b05      	ldr	r3, [pc, #20]	@ (800033c <SysClockConfig+0xb4>)
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	f003 0308 	and.w	r3, r3, #8
 800032c:	2b00      	cmp	r3, #0
 800032e:	d0f9      	beq.n	8000324 <SysClockConfig+0x9c>

}
 8000330:	bf00      	nop
 8000332:	bf00      	nop
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	40023800 	.word	0x40023800
 8000340:	40007000 	.word	0x40007000
 8000344:	40023c00 	.word	0x40023c00
 8000348:	00401504 	.word	0x00401504

0800034c <Usart2Config>:
 *      Author: allen
 */

#include "UART2Config.h"

void Usart2Config(){
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
	//Enable clock for USART2
	RCC->APB1ENR |= (1<<17);
 8000350:	4b25      	ldr	r3, [pc, #148]	@ (80003e8 <Usart2Config+0x9c>)
 8000352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000354:	4a24      	ldr	r2, [pc, #144]	@ (80003e8 <Usart2Config+0x9c>)
 8000356:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800035a:	6413      	str	r3, [r2, #64]	@ 0x40
	//Enable GPIOA to configure PA2 and PA3 for USART2
	RCC->AHB1ENR |= (1 << 0);
 800035c:	4b22      	ldr	r3, [pc, #136]	@ (80003e8 <Usart2Config+0x9c>)
 800035e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000360:	4a21      	ldr	r2, [pc, #132]	@ (80003e8 <Usart2Config+0x9c>)
 8000362:	f043 0301 	orr.w	r3, r3, #1
 8000366:	6313      	str	r3, [r2, #48]	@ 0x30
	//Set alternate function of PA2 and PA3 for USART2
	GPIOA->AFR[0] |= (7 << 8);
 8000368:	4b20      	ldr	r3, [pc, #128]	@ (80003ec <Usart2Config+0xa0>)
 800036a:	6a1b      	ldr	r3, [r3, #32]
 800036c:	4a1f      	ldr	r2, [pc, #124]	@ (80003ec <Usart2Config+0xa0>)
 800036e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000372:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (7 << 12);
 8000374:	4b1d      	ldr	r3, [pc, #116]	@ (80003ec <Usart2Config+0xa0>)
 8000376:	6a1b      	ldr	r3, [r3, #32]
 8000378:	4a1c      	ldr	r2, [pc, #112]	@ (80003ec <Usart2Config+0xa0>)
 800037a:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 800037e:	6213      	str	r3, [r2, #32]

	//Set MODE for PA2 and PA3 for alternate function
	GPIOA->MODER |= (2 << 4);
 8000380:	4b1a      	ldr	r3, [pc, #104]	@ (80003ec <Usart2Config+0xa0>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a19      	ldr	r2, [pc, #100]	@ (80003ec <Usart2Config+0xa0>)
 8000386:	f043 0320 	orr.w	r3, r3, #32
 800038a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (2 << 6);
 800038c:	4b17      	ldr	r3, [pc, #92]	@ (80003ec <Usart2Config+0xa0>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a16      	ldr	r2, [pc, #88]	@ (80003ec <Usart2Config+0xa0>)
 8000392:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000396:	6013      	str	r3, [r2, #0]

	//Set speed for PA2 and PA3;
	GPIOA->OSPEEDR |= (2 << 4);
 8000398:	4b14      	ldr	r3, [pc, #80]	@ (80003ec <Usart2Config+0xa0>)
 800039a:	689b      	ldr	r3, [r3, #8]
 800039c:	4a13      	ldr	r2, [pc, #76]	@ (80003ec <Usart2Config+0xa0>)
 800039e:	f043 0320 	orr.w	r3, r3, #32
 80003a2:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (2 << 6);
 80003a4:	4b11      	ldr	r3, [pc, #68]	@ (80003ec <Usart2Config+0xa0>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	4a10      	ldr	r2, [pc, #64]	@ (80003ec <Usart2Config+0xa0>)
 80003aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003ae:	6093      	str	r3, [r2, #8]

	USART2->CR1 |= (1<<13); //Enable USART2
 80003b0:	4b0f      	ldr	r3, [pc, #60]	@ (80003f0 <Usart2Config+0xa4>)
 80003b2:	68db      	ldr	r3, [r3, #12]
 80003b4:	4a0e      	ldr	r2, [pc, #56]	@ (80003f0 <Usart2Config+0xa4>)
 80003b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003ba:	60d3      	str	r3, [r2, #12]
	USART2->CR1 &= ~(1<<12); //Select 8 data bits
 80003bc:	4b0c      	ldr	r3, [pc, #48]	@ (80003f0 <Usart2Config+0xa4>)
 80003be:	68db      	ldr	r3, [r3, #12]
 80003c0:	4a0b      	ldr	r2, [pc, #44]	@ (80003f0 <Usart2Config+0xa4>)
 80003c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80003c6:	60d3      	str	r3, [r2, #12]

	//Baud rate set up, USARTDIV = 22.7866 for 115200 baudrate and over8 = 0
	USART2->BRR = (7 << 0) | (22 << 4); //Set fraction to 7. Mantissa to 22
 80003c8:	4b09      	ldr	r3, [pc, #36]	@ (80003f0 <Usart2Config+0xa4>)
 80003ca:	f240 1267 	movw	r2, #359	@ 0x167
 80003ce:	609a      	str	r2, [r3, #8]

	 //Enable transmitting and receiving
	USART2->CR1 |= (3 << 2);
 80003d0:	4b07      	ldr	r3, [pc, #28]	@ (80003f0 <Usart2Config+0xa4>)
 80003d2:	68db      	ldr	r3, [r3, #12]
 80003d4:	4a06      	ldr	r2, [pc, #24]	@ (80003f0 <Usart2Config+0xa4>)
 80003d6:	f043 030c 	orr.w	r3, r3, #12
 80003da:	60d3      	str	r3, [r2, #12]

}
 80003dc:	bf00      	nop
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	40023800 	.word	0x40023800
 80003ec:	40020000 	.word	0x40020000
 80003f0:	40004400 	.word	0x40004400

080003f4 <UART2_SendChar>:

void UART2_SendChar(char c){
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4603      	mov	r3, r0
 80003fc:	71fb      	strb	r3, [r7, #7]

	USART2->DR = c; //load data into data register
 80003fe:	4a08      	ldr	r2, [pc, #32]	@ (8000420 <UART2_SendChar+0x2c>)
 8000400:	79fb      	ldrb	r3, [r7, #7]
 8000402:	6053      	str	r3, [r2, #4]
	while (!(USART2->SR & (1<<6))); //Wait for data to send.
 8000404:	bf00      	nop
 8000406:	4b06      	ldr	r3, [pc, #24]	@ (8000420 <UART2_SendChar+0x2c>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800040e:	2b00      	cmp	r3, #0
 8000410:	d0f9      	beq.n	8000406 <UART2_SendChar+0x12>

}
 8000412:	bf00      	nop
 8000414:	bf00      	nop
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr
 8000420:	40004400 	.word	0x40004400

08000424 <UART2_SendString>:

void UART2_SendString(char* string){
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]

	while (*string) UART2_SendChar(*string++); //Send one character at a time via UART.
 800042c:	e006      	b.n	800043c <UART2_SendString+0x18>
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	1c5a      	adds	r2, r3, #1
 8000432:	607a      	str	r2, [r7, #4]
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	4618      	mov	r0, r3
 8000438:	f7ff ffdc 	bl	80003f4 <UART2_SendChar>
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d1f4      	bne.n	800042e <UART2_SendString+0xa>
}
 8000444:	bf00      	nop
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
	...

08000450 <I2CConfig>:
#include "Delay.h"
#include "UART2Config.h"
#include <stdlib.h>


void I2CConfig(){
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
	//Set up GPIOB for pins PB10 (I2C SCL) and PB3 (I2C SDA)

	RCC->AHB1ENR |= (1<<1); //Enable GIPOB clock.
 8000454:	4b30      	ldr	r3, [pc, #192]	@ (8000518 <I2CConfig+0xc8>)
 8000456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000458:	4a2f      	ldr	r2, [pc, #188]	@ (8000518 <I2CConfig+0xc8>)
 800045a:	f043 0302 	orr.w	r3, r3, #2
 800045e:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR |= (1 << 21); //Enable I2C1.
 8000460:	4b2d      	ldr	r3, [pc, #180]	@ (8000518 <I2CConfig+0xc8>)
 8000462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000464:	4a2c      	ldr	r2, [pc, #176]	@ (8000518 <I2CConfig+0xc8>)
 8000466:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800046a:	6413      	str	r3, [r2, #64]	@ 0x40


	GPIOB->MODER |= (2 << 16) | (2 << 18); //Set PB8 mode to alternate func. Set PB9 mode to alternate func
 800046c:	4b2b      	ldr	r3, [pc, #172]	@ (800051c <I2CConfig+0xcc>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a2a      	ldr	r2, [pc, #168]	@ (800051c <I2CConfig+0xcc>)
 8000472:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8000476:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= (1 << 8) | (1 << 9); //Set PB8 to open drain. Set PB9 to open drain
 8000478:	4b28      	ldr	r3, [pc, #160]	@ (800051c <I2CConfig+0xcc>)
 800047a:	685b      	ldr	r3, [r3, #4]
 800047c:	4a27      	ldr	r2, [pc, #156]	@ (800051c <I2CConfig+0xcc>)
 800047e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000482:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= (3 << 16) | (3 << 18); // Set output speed of PB8 to low. Set output speed of PB9 to low.
 8000484:	4b25      	ldr	r3, [pc, #148]	@ (800051c <I2CConfig+0xcc>)
 8000486:	689b      	ldr	r3, [r3, #8]
 8000488:	4a24      	ldr	r2, [pc, #144]	@ (800051c <I2CConfig+0xcc>)
 800048a:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 800048e:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR |= (1 << 16) | (1 << 18); //Set PB9 to pull-up. Set PB9 to pull-up.
 8000490:	4b22      	ldr	r3, [pc, #136]	@ (800051c <I2CConfig+0xcc>)
 8000492:	68db      	ldr	r3, [r3, #12]
 8000494:	4a21      	ldr	r2, [pc, #132]	@ (800051c <I2CConfig+0xcc>)
 8000496:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 800049a:	60d3      	str	r3, [r2, #12]
	GPIOB->AFR[1] |= (4 << 0); //Set alternate function for PB8 for I2C
 800049c:	4b1f      	ldr	r3, [pc, #124]	@ (800051c <I2CConfig+0xcc>)
 800049e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004a0:	4a1e      	ldr	r2, [pc, #120]	@ (800051c <I2CConfig+0xcc>)
 80004a2:	f043 0304 	orr.w	r3, r3, #4
 80004a6:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (4 << 4); //Set alternate function for PB9 for I2C
 80004a8:	4b1c      	ldr	r3, [pc, #112]	@ (800051c <I2CConfig+0xcc>)
 80004aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004ac:	4a1b      	ldr	r2, [pc, #108]	@ (800051c <I2CConfig+0xcc>)
 80004ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004b2:	6253      	str	r3, [r2, #36]	@ 0x24

	//Set up I2C1

	I2C1->CR1 |= (1<<15); //Reset I2C1
 80004b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000520 <I2CConfig+0xd0>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a19      	ldr	r2, [pc, #100]	@ (8000520 <I2CConfig+0xd0>)
 80004ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80004be:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~(1<<15); //Reset I2C1
 80004c0:	4b17      	ldr	r3, [pc, #92]	@ (8000520 <I2CConfig+0xd0>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a16      	ldr	r2, [pc, #88]	@ (8000520 <I2CConfig+0xd0>)
 80004c6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80004ca:	6013      	str	r3, [r2, #0]

	I2C1->CR2 |= (42 << 0); //Set frequency to 42Mhz
 80004cc:	4b14      	ldr	r3, [pc, #80]	@ (8000520 <I2CConfig+0xd0>)
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	4a13      	ldr	r2, [pc, #76]	@ (8000520 <I2CConfig+0xd0>)
 80004d2:	f043 032a 	orr.w	r3, r3, #42	@ 0x2a
 80004d6:	6053      	str	r3, [r2, #4]

	I2C1->CCR &= ~(1 << 15); //Set to standard mode
 80004d8:	4b11      	ldr	r3, [pc, #68]	@ (8000520 <I2CConfig+0xd0>)
 80004da:	69db      	ldr	r3, [r3, #28]
 80004dc:	4a10      	ldr	r2, [pc, #64]	@ (8000520 <I2CConfig+0xd0>)
 80004de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80004e2:	61d3      	str	r3, [r2, #28]
	I2C1->CCR &= ~(1 << 14); //Set duty to 0. Not using fm mode.
 80004e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000520 <I2CConfig+0xd0>)
 80004e6:	69db      	ldr	r3, [r3, #28]
 80004e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000520 <I2CConfig+0xd0>)
 80004ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80004ee:	61d3      	str	r3, [r2, #28]
	I2C1->CCR |= (210 << 0); // Set CCR value.
 80004f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000520 <I2CConfig+0xd0>)
 80004f2:	69db      	ldr	r3, [r3, #28]
 80004f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000520 <I2CConfig+0xd0>)
 80004f6:	f043 03d2 	orr.w	r3, r3, #210	@ 0xd2
 80004fa:	61d3      	str	r3, [r2, #28]
	I2C1->TRISE = 43; //Set rise time
 80004fc:	4b08      	ldr	r3, [pc, #32]	@ (8000520 <I2CConfig+0xd0>)
 80004fe:	222b      	movs	r2, #43	@ 0x2b
 8000500:	621a      	str	r2, [r3, #32]
	I2C1->CR1 |= (1<<0); //Enable peripheral
 8000502:	4b07      	ldr	r3, [pc, #28]	@ (8000520 <I2CConfig+0xd0>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a06      	ldr	r2, [pc, #24]	@ (8000520 <I2CConfig+0xd0>)
 8000508:	f043 0301 	orr.w	r3, r3, #1
 800050c:	6013      	str	r3, [r2, #0]

}
 800050e:	bf00      	nop
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	40023800 	.word	0x40023800
 800051c:	40020400 	.word	0x40020400
 8000520:	40005400 	.word	0x40005400

08000524 <I2C_Start>:

void I2C_Start(){
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	I2C1->CR1 |= (1 << 8); //Start communication
 8000528:	4b0a      	ldr	r3, [pc, #40]	@ (8000554 <I2C_Start+0x30>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a09      	ldr	r2, [pc, #36]	@ (8000554 <I2C_Start+0x30>)
 800052e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000532:	6013      	str	r3, [r2, #0]
	while(!(I2C1->SR1 & (1 << 0))){
 8000534:	e002      	b.n	800053c <I2C_Start+0x18>
		UART2_SendString("start not sent \r\n");
 8000536:	4808      	ldr	r0, [pc, #32]	@ (8000558 <I2C_Start+0x34>)
 8000538:	f7ff ff74 	bl	8000424 <UART2_SendString>
	while(!(I2C1->SR1 & (1 << 0))){
 800053c:	4b05      	ldr	r3, [pc, #20]	@ (8000554 <I2C_Start+0x30>)
 800053e:	695b      	ldr	r3, [r3, #20]
 8000540:	f003 0301 	and.w	r3, r3, #1
 8000544:	2b00      	cmp	r3, #0
 8000546:	d0f6      	beq.n	8000536 <I2C_Start+0x12>
	}
	UART2_SendString("start sent \r\n");
 8000548:	4804      	ldr	r0, [pc, #16]	@ (800055c <I2C_Start+0x38>)
 800054a:	f7ff ff6b 	bl	8000424 <UART2_SendString>
}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40005400 	.word	0x40005400
 8000558:	0800080c 	.word	0x0800080c
 800055c:	08000820 	.word	0x08000820

08000560 <I2C_Write>:

void I2C_Write(uint8_t c){
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
	while(!(I2C1->SR1 & (1 << 7))); //Wait for data register to be empty
 800056a:	bf00      	nop
 800056c:	4b0b      	ldr	r3, [pc, #44]	@ (800059c <I2C_Write+0x3c>)
 800056e:	695b      	ldr	r3, [r3, #20]
 8000570:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000574:	2b00      	cmp	r3, #0
 8000576:	d0f9      	beq.n	800056c <I2C_Write+0xc>
	I2C1->DR = c; //Send data
 8000578:	4a08      	ldr	r2, [pc, #32]	@ (800059c <I2C_Write+0x3c>)
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	6113      	str	r3, [r2, #16]
	while(!(I2C1->SR1 & (1 << 2))); //Wait for data register to empty and byte transfer finished to be set.
 800057e:	bf00      	nop
 8000580:	4b06      	ldr	r3, [pc, #24]	@ (800059c <I2C_Write+0x3c>)
 8000582:	695b      	ldr	r3, [r3, #20]
 8000584:	f003 0304 	and.w	r3, r3, #4
 8000588:	2b00      	cmp	r3, #0
 800058a:	d0f9      	beq.n	8000580 <I2C_Write+0x20>

}
 800058c:	bf00      	nop
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	40005400 	.word	0x40005400

080005a0 <I2C_Address>:

void I2C_Address(uint8_t addr){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
	I2C1->DR = addr; //send address
 80005aa:	4a17      	ldr	r2, [pc, #92]	@ (8000608 <I2C_Address+0x68>)
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	6113      	str	r3, [r2, #16]
	while(!(I2C1->SR1 & (1 << 1))){
 80005b0:	e014      	b.n	80005dc <I2C_Address+0x3c>
		UART2_SendString("not acknowledged \r\n");
 80005b2:	4816      	ldr	r0, [pc, #88]	@ (800060c <I2C_Address+0x6c>)
 80005b4:	f7ff ff36 	bl	8000424 <UART2_SendString>
		for (int i = 0; i < 10000; i++);
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	e002      	b.n	80005c4 <I2C_Address+0x24>
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80005ca:	4293      	cmp	r3, r2
 80005cc:	ddf7      	ble.n	80005be <I2C_Address+0x1e>
		I2C_Stop();
 80005ce:	f000 f821 	bl	8000614 <I2C_Stop>
		I2C_Start();
 80005d2:	f7ff ffa7 	bl	8000524 <I2C_Start>
		I2C1->DR = addr;
 80005d6:	4a0c      	ldr	r2, [pc, #48]	@ (8000608 <I2C_Address+0x68>)
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	6113      	str	r3, [r2, #16]
	while(!(I2C1->SR1 & (1 << 1))){
 80005dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000608 <I2C_Address+0x68>)
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	f003 0302 	and.w	r3, r3, #2
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d0e4      	beq.n	80005b2 <I2C_Address+0x12>
		}
	UART2_SendString("acknowledged \r\n");
 80005e8:	4809      	ldr	r0, [pc, #36]	@ (8000610 <I2C_Address+0x70>)
 80005ea:	f7ff ff1b 	bl	8000424 <UART2_SendString>
	uint8_t read = I2C1->SR1 | I2C1->SR2; // Read SR1 and SR2 to clear address bit.
 80005ee:	4b06      	ldr	r3, [pc, #24]	@ (8000608 <I2C_Address+0x68>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	4b04      	ldr	r3, [pc, #16]	@ (8000608 <I2C_Address+0x68>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	4313      	orrs	r3, r2
 80005fc:	72fb      	strb	r3, [r7, #11]
//
//    // Clear ADDR flag by reading SR1 and SR2
//    volatile uint8_t temp = I2C1->SR1 | I2C1->SR2;
//    UART2_SendString("Address acknowledged\r\n");

}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40005400 	.word	0x40005400
 800060c:	08000830 	.word	0x08000830
 8000610:	08000844 	.word	0x08000844

08000614 <I2C_Stop>:

void I2C_Stop(){
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
	I2C1->CR1 |= (1 << 9); //Stop transmission.
 8000618:	4b05      	ldr	r3, [pc, #20]	@ (8000630 <I2C_Stop+0x1c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a04      	ldr	r2, [pc, #16]	@ (8000630 <I2C_Stop+0x1c>)
 800061e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000622:	6013      	str	r3, [r2, #0]
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	40005400 	.word	0x40005400

08000634 <main>:
//    UART2_SendString("I2C address scan complete.\r\n");
//    while(1);
//}


int main(void) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
    RCC->APB1RSTR |= (1 << 21);
 800063a:	4b1a      	ldr	r3, [pc, #104]	@ (80006a4 <main+0x70>)
 800063c:	6a1b      	ldr	r3, [r3, #32]
 800063e:	4a19      	ldr	r2, [pc, #100]	@ (80006a4 <main+0x70>)
 8000640:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000644:	6213      	str	r3, [r2, #32]
    RCC->APB1RSTR &= ~(1 << 21);
 8000646:	4b17      	ldr	r3, [pc, #92]	@ (80006a4 <main+0x70>)
 8000648:	6a1b      	ldr	r3, [r3, #32]
 800064a:	4a16      	ldr	r2, [pc, #88]	@ (80006a4 <main+0x70>)
 800064c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000650:	6213      	str	r3, [r2, #32]
    SysClockConfig();
 8000652:	f7ff fe19 	bl	8000288 <SysClockConfig>
    I2CConfig();
 8000656:	f7ff fefb 	bl	8000450 <I2CConfig>
    Usart2Config();
 800065a:	f7ff fe77 	bl	800034c <Usart2Config>
    TIM5Config();
 800065e:	f7ff fdb9 	bl	80001d4 <TIM5Config>
    UART2_SendString("starting light show\r\n");
 8000662:	4811      	ldr	r0, [pc, #68]	@ (80006a8 <main+0x74>)
 8000664:	f7ff fede 	bl	8000424 <UART2_SendString>

//    I2C_Scan();


    while (1) {
    	for(int i = 0; i < 8; i++){
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	e015      	b.n	800069a <main+0x66>
    		I2C_Start();
 800066e:	f7ff ff59 	bl	8000524 <I2C_Start>
    		I2C_Address(0x4E);
 8000672:	204e      	movs	r0, #78	@ 0x4e
 8000674:	f7ff ff94 	bl	80005a0 <I2C_Address>
    		I2C_Write(1 << i);
 8000678:	2201      	movs	r2, #1
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	fa02 f303 	lsl.w	r3, r2, r3
 8000680:	b2db      	uxtb	r3, r3
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ff6c 	bl	8000560 <I2C_Write>
    		I2C_Stop();
 8000688:	f7ff ffc4 	bl	8000614 <I2C_Stop>
    		Delay_ms(300);
 800068c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000690:	f7ff fde2 	bl	8000258 <Delay_ms>
    	for(int i = 0; i < 8; i++){
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	3301      	adds	r3, #1
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2b07      	cmp	r3, #7
 800069e:	dde6      	ble.n	800066e <main+0x3a>
 80006a0:	e7e2      	b.n	8000668 <main+0x34>
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800
 80006a8:	08000854 	.word	0x08000854

080006ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006b0:	bf00      	nop
 80006b2:	e7fd      	b.n	80006b0 <NMI_Handler+0x4>

080006b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <HardFault_Handler+0x4>

080006bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c0:	bf00      	nop
 80006c2:	e7fd      	b.n	80006c0 <MemManage_Handler+0x4>

080006c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <BusFault_Handler+0x4>

080006cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d0:	bf00      	nop
 80006d2:	e7fd      	b.n	80006d0 <UsageFault_Handler+0x4>

080006d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr

080006e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr

080006fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000702:	f000 f83f 	bl	8000784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000710:	4b06      	ldr	r3, [pc, #24]	@ (800072c <SystemInit+0x20>)
 8000712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000716:	4a05      	ldr	r2, [pc, #20]	@ (800072c <SystemInit+0x20>)
 8000718:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800071c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000730:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000768 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000734:	f7ff ffea 	bl	800070c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000738:	480c      	ldr	r0, [pc, #48]	@ (800076c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800073a:	490d      	ldr	r1, [pc, #52]	@ (8000770 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800073c:	4a0d      	ldr	r2, [pc, #52]	@ (8000774 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800073e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000740:	e002      	b.n	8000748 <LoopCopyDataInit>

08000742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000746:	3304      	adds	r3, #4

08000748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800074c:	d3f9      	bcc.n	8000742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074e:	4a0a      	ldr	r2, [pc, #40]	@ (8000778 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000750:	4c0a      	ldr	r4, [pc, #40]	@ (800077c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000754:	e001      	b.n	800075a <LoopFillZerobss>

08000756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000758:	3204      	adds	r2, #4

0800075a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800075c:	d3fb      	bcc.n	8000756 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800075e:	f000 f825 	bl	80007ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000762:	f7ff ff67 	bl	8000634 <main>
  bx  lr    
 8000766:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000768:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800076c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000770:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000774:	08000874 	.word	0x08000874
  ldr r2, =_sbss
 8000778:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800077c:	20000024 	.word	0x20000024

08000780 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000780:	e7fe      	b.n	8000780 <ADC_IRQHandler>
	...

08000784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000788:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <HAL_IncTick+0x20>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	461a      	mov	r2, r3
 800078e:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <HAL_IncTick+0x24>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4413      	add	r3, r2
 8000794:	4a04      	ldr	r2, [pc, #16]	@ (80007a8 <HAL_IncTick+0x24>)
 8000796:	6013      	str	r3, [r2, #0]
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	20000000 	.word	0x20000000
 80007a8:	20000020 	.word	0x20000020

080007ac <__libc_init_array>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	4d0d      	ldr	r5, [pc, #52]	@ (80007e4 <__libc_init_array+0x38>)
 80007b0:	4c0d      	ldr	r4, [pc, #52]	@ (80007e8 <__libc_init_array+0x3c>)
 80007b2:	1b64      	subs	r4, r4, r5
 80007b4:	10a4      	asrs	r4, r4, #2
 80007b6:	2600      	movs	r6, #0
 80007b8:	42a6      	cmp	r6, r4
 80007ba:	d109      	bne.n	80007d0 <__libc_init_array+0x24>
 80007bc:	4d0b      	ldr	r5, [pc, #44]	@ (80007ec <__libc_init_array+0x40>)
 80007be:	4c0c      	ldr	r4, [pc, #48]	@ (80007f0 <__libc_init_array+0x44>)
 80007c0:	f000 f818 	bl	80007f4 <_init>
 80007c4:	1b64      	subs	r4, r4, r5
 80007c6:	10a4      	asrs	r4, r4, #2
 80007c8:	2600      	movs	r6, #0
 80007ca:	42a6      	cmp	r6, r4
 80007cc:	d105      	bne.n	80007da <__libc_init_array+0x2e>
 80007ce:	bd70      	pop	{r4, r5, r6, pc}
 80007d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80007d4:	4798      	blx	r3
 80007d6:	3601      	adds	r6, #1
 80007d8:	e7ee      	b.n	80007b8 <__libc_init_array+0xc>
 80007da:	f855 3b04 	ldr.w	r3, [r5], #4
 80007de:	4798      	blx	r3
 80007e0:	3601      	adds	r6, #1
 80007e2:	e7f2      	b.n	80007ca <__libc_init_array+0x1e>
 80007e4:	0800086c 	.word	0x0800086c
 80007e8:	0800086c 	.word	0x0800086c
 80007ec:	0800086c 	.word	0x0800086c
 80007f0:	08000870 	.word	0x08000870

080007f4 <_init>:
 80007f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007f6:	bf00      	nop
 80007f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007fa:	bc08      	pop	{r3}
 80007fc:	469e      	mov	lr, r3
 80007fe:	4770      	bx	lr

08000800 <_fini>:
 8000800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000802:	bf00      	nop
 8000804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000806:	bc08      	pop	{r3}
 8000808:	469e      	mov	lr, r3
 800080a:	4770      	bx	lr
